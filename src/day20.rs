use std::collections::{HashMap, HashSet};
use std::collections::hash_map::RandomState;
use std::time::{Duration, Instant};

pub fn part1() {
    let tiles = parse_input();

    let neighbours: HashMap<u64, usize> = tiles.iter().map(|t1| {
        let count = tiles.iter().map(|t2| match t1.name == t2.name {
            true => 0,
            false => {
                match_tile(t1, t2, match_left).len() +
                    match_tile(t1, t2, match_right).len() +
                    match_tile(t1, t2, match_top).len() +
                    match_tile(t1, t2, match_bottom).len()
            }
        }).sum();
        (t1.name, count)
    }).collect();
    let max_n = neighbours.iter().max_by(|&x, &y| x.1.cmp(y.1));
    let min_n = neighbours.iter().min_by(|&x, &y| x.1.cmp(y.1));
    println!("min n {:?}", neighbours.iter().filter(|x| x.1 == min_n.unwrap().1).map(|x| x.0).collect::<Vec<&u64>>());

    let tiles_map: HashMap<u64, Tile> = tiles.iter().map(|x| (x.name, x.clone())).collect();
    let result: u64 = neighbours.iter().filter(|x| x.1 == min_n.unwrap().1).map(|x| x.0).product();
    println!("{}", result);

    let corners_ids: Vec<u64> = neighbours.iter().filter(|x| x.1 == min_n.unwrap().1).map(|x| *x.0).collect();

    let corners: Vec<Tile> = corners_ids.iter().map(|i| tiles_map.get(i).unwrap()).map(|t| t.clone()).collect();
    let top_lefts = can_be_top_left(&corners, &tiles);

    let left_corner = top_lefts.iter().next().unwrap();
    let size: f64 = tiles.len() as f64;
    let size = size.sqrt() as usize;
    let left_tiles: HashSet<Tile> = tiles.iter().filter(|&t| t.name != left_corner.name).map(|x| x.clone()).collect();
    let result = get_possible_maps(size, (0, 0), &left_tiles, &vec![left_corner.clone()]);

    println!("*");
    // println!("{:?}", result);
    // println!("{:?}", result.len());
    // println!("{:?}", result[0].iter().map(|t| (t.name, t.top_border.clone())).collect::<Vec<(u64, Vec<bool>)>>());

    let chars = parse_chars(&input());
    let chars: Vec<Vec<Vec<char>>> = result[0].iter().map(|t| tile_to_chars(t, &chars)).collect();
    // println!("{:?}", chars);
    // println!("first lines {:?}", chars.iter().map(|x| x[0].clone()).collect::<Vec<Vec<char>>>());
    let char_lines = char_to_lines(&chars);
    println!("{:?}", char_lines);
    print_map(&char_lines);

    let size = tiles[0].bottom_border.len();
    let no_border: Vec<Vec<char>> = char_lines
        .iter().enumerate().filter(|&(ind, line)| ind % size != 0 && (ind + 1) % size != 0)
        .map(|p| p.1.clone())
        .map(|line|
            line.iter().enumerate()
                .filter(|(ind, v)| ind % size != 0 && (ind + 1) % size != 0)
                .map(|p| p.1.clone()).collect())
        .collect();
    println!("*");
    print_map(&no_border);

    let monster_coords: Vec<(usize, usize)> = vec![
        (0, 18),
        (1, 0), (1, 5), (1, 6), (1, 11), (1, 12), (1, 17), (1, 18), (1, 19),
        (2, 1), (2, 4), (2, 7), (2, 10), (2, 13), (2, 16)
    ];
    let monster_width = monster_coords.iter().map(|&p| p.1).max().unwrap() + 1;
    let monster_height = monster_coords.iter().map(|&p| p.0).max().unwrap() + 1;
    println!("monster width {}", monster_width);
    println!("monster height {}", monster_height);
    let monster_counter = count_monsters(&no_border, monster_width, monster_height, &monster_coords);
    println!("monsters {:?}", monster_counter);

    let monster_counter: usize = monster_counter.into_iter().filter(|&c| c != 0).next().unwrap();
    let full_count: usize = no_border.iter().map(|line|
        line.iter().filter(|&c| c.eq(&'#')).count()
    ).sum();
    let result = full_count - monster_counter * monster_coords.len();
    println!("{}", result);
}

fn count_monsters(map: &Vec<Vec<char>>, width: usize, height: usize, coords: &Vec<(usize, usize)>) -> Vec<usize> {
    let mut map_changed: Vec<Vec<char>> = map.clone();
    (0..2).into_iter().flat_map(|_orientation| -> Vec<Vec<Vec<char>>> {
        map_changed = flip_chars(&map_changed);
        (0..4).into_iter().map(|_rotation| {
            map_changed = rotate_chars_left(&map_changed).clone();
            map_changed.clone()
        }).collect()
    }).map(|map| {
        let mut counter = 0;
        for i in 0..(map.len() - 1 - height) {
            for j in 0..(map.len() - 1 - width) {
                match coords.iter().all(|&(x, y)| map[x + i][y + j] == '#') {
                    true => counter += 1,
                    false => counter += 0
                }
            }
        }
        counter
    }).collect()
}

fn char_to_lines(chars: &Vec<Vec<Vec<char>>>) -> Vec<Vec<char>> {
    let size = (chars.len() as f64).sqrt() as usize;
    let ar_size = chars[0].len();
    let final_size = size * ar_size;
    let res: Vec<Vec<char>> = (0..size).into_iter().flat_map(|i| -> Vec<Vec<char>>{
        (0..ar_size).into_iter().flat_map(|k| -> Vec<Vec<char>> {
            (0..size).into_iter().map(|j| {
                chars[i * size + j][k].clone()
            }).collect()
        }).collect()
    }).collect();

    let res: Vec<char> = res.concat();
    res.chunks(final_size).map(|l| Vec::from(l)).collect()
}

fn print_map(lines: &Vec<Vec<char>>) {
    let s: Vec<String> = lines.iter().map(|line| {
        line.iter().collect()
    }).collect();
    let s = s.join("\n");
    println!("{}", s);
}

fn tile_to_chars(tile: &Tile, chars: &HashMap<u64, Vec<Vec<char>>>) -> Vec<Vec<char>> {
    let mut result = chars.get(&tile.name).unwrap().clone();
    let changed: Vec<Vec<Vec<char>>> = (0..2).into_iter().flat_map(|_orientation| -> Vec<Vec<Vec<char>>> {
        result = flip_chars(&result);
        (0..4).into_iter().map(|_rotation| {
            result = rotate_chars_left(&result).clone();
            result.clone()
        }).collect()
    }).collect();
    let filtered: Vec<Vec<Vec<char>>> = changed.into_iter().filter(|ar| compare(tile, ar)).collect();
    filtered[0].clone()
}

fn compare(tile: &Tile, c: &Vec<Vec<char>>) -> bool {
    let bool_ar: Vec<Vec<bool>> = c.iter().map(|v| v.iter().map(|c| *c == '#').collect()).collect();
    bool_ar[0].eq(&tile.top_border) &&
        bool_ar.last().unwrap().iter().rev().eq(&tile.bottom_border)
}

fn rotate_chars_left(chars: &Vec<Vec<char>>) -> Vec<Vec<char>> {
    let mut result = chars.clone();
    for y in 0..chars.len() {
        for x in 0..chars.len() {
            result[chars.len() - 1 - y][x] = chars[x][y]
        }
    }
    result
}

fn flip_chars(chars: &Vec<Vec<char>>) -> Vec<Vec<char>> {
    chars.iter().map(|r| r.iter().rev().map(|x| *x).collect()).collect()
}

fn get_possible_maps(size: usize, position: (usize, usize), available: &HashSet<Tile>, acc: &Vec<Tile>) -> Vec<Vec<Tile>> {
    if available.len() == 0 { return vec![acc.clone()]; }
    let new_pos = nex_pos(size, position);
    available.iter().flat_map(|av| -> Vec<Tile> {
        every_possibility(av).into_iter().filter(|t| {
            top_ok(size, new_pos, t, acc) &&
                left_ok(size, new_pos, t, acc)
        }).collect()
    }).flat_map(|t| {
        let new_set: HashSet<Tile> = available.iter().filter(|&tt| t.name != tt.name).map(|x| x.clone()).collect();
        let mut new_acc: Vec<Tile> = acc.clone();
        new_acc.push(t);
        get_possible_maps(size, new_pos, &new_set, &new_acc)
    }).collect()
}

fn top_ok(size: usize, position_candidate: (usize, usize), candidate: &Tile, matched: &Vec<Tile>) -> bool {
    let x = position_candidate.0;
    let y = position_candidate.1;
    match y {
        0 => true,
        y => {
            let t = &matched[x % size + (y - 1) * size];
            match_top(candidate, t)
        }
    }
}

fn left_ok(size: usize, position_candidate: (usize, usize), candidate: &Tile, matched: &Vec<Tile>) -> bool {
    let x = position_candidate.0;
    let y = position_candidate.1;
    match x {
        0 => true,
        x => match_left(candidate, &matched[(x - 1) % size + y * size])
    }
}

fn nex_pos(size: usize, position: (usize, usize)) -> (usize, usize) {
    let x = position.0;
    let y = position.1;
    let old_pos = y * size + x + 1;
    (old_pos % size, old_pos / size)
}

fn every_possibility(tile: &Tile) -> Vec<Tile> {
    let mut result = tile.clone();
    (0..2).into_iter().flat_map(|_orientation| -> Vec<Tile> {
        result = flip_h(&result);
        (0..4).into_iter().map(|rotation| {
            result = rotate_n(&result, rotation);
            result.clone()
        }).collect()
    }).collect()
}

fn can_be_top_left(candidates: &[Tile], tiles: &[Tile]) -> Vec<Tile> {
    let top_left: Vec<Tile> = candidates.iter().flat_map(|c| -> Vec<Tile> {
        every_possibility(c).iter().filter(|&t| {
            let r_pos = find_for_fixed(t, tiles, match_right).len();
            let b_pos = find_for_fixed(t, tiles, match_bottom).len();
            r_pos > 0 && b_pos > 0
        }).map(|t| t.clone()).collect()
    }).collect();
    top_left
}

fn find_for_fixed(tile: &Tile, tiles: &[Tile], match_fn: fn(&Tile, &Tile) -> bool) -> Vec<Tile> {
    tiles.iter().flat_map(|t| -> Vec<Tile> {
        match_tile(tile, t, match_fn)
    }).collect()
}

fn find_top_left(candidate: &Tile, tiles: &HashMap<u64, Tile>) -> Vec<Tile> {
    let right = tiles.iter().map(|(ind, t)| {
        match_tile(candidate, t, match_right)
        // match_tile(candidate, t, match_left)
    }).filter(|t| t.len() > 0).next();
    let bottom = tiles.iter().map(|(ind, t)| {
        match_tile(candidate, t, match_bottom)
        // match_tile(candidate, t, match_bottom)
    }).filter(|t| t.len() > 0).next();
    match (right, bottom) {
        (None, _) | (_, None) => vec![],
        (Some(x), Some(y)) => vec![x[0].clone(), y[0].clone()]
    }
}

fn match_right(t1: &Tile, t2: &Tile) -> bool {
    t1.right_border.iter().rev().eq(t2.left_border.iter())
}

fn match_left(t1: &Tile, t2: &Tile) -> bool {
    t1.left_border.iter().rev().eq(t2.right_border.iter())
}

fn match_top(t1: &Tile, t2: &Tile) -> bool {
    t1.top_border.iter().rev().eq(t2.bottom_border.iter())
}

fn match_bottom(t1: &Tile, t2: &Tile) -> bool {
    t1.bottom_border.iter().rev().eq(t2.top_border.iter())
}

fn match_tile(t1: &Tile, t2: &Tile, match_fun: fn(&Tile, &Tile) -> bool) -> Vec<Tile> {
    every_possibility(&t2).into_iter().filter(|t| match_fun(t1, t) && t1.name != t.name).collect()
}

fn tiles_match(tiles: &[Tile], ind1: usize, ind2: usize, pos1: &(usize, usize), pos2: &(usize, usize)) -> bool {
    let t1 = &tiles[ind1];
    let t2 = &tiles[ind2];
    match (pos2.0 as i32 - pos1.0 as i32, pos2.1 as i32 - pos1.1 as i32) {
        (1, 0) => t2.left_border.iter().rev().eq(t1.right_border.iter()),
        (0, 1) => t2.top_border.iter().rev().eq(t1.bottom_border.iter()),
        (-1, 0) => t2.right_border.iter().rev().eq(t1.left_border.iter()),
        (0, -1) => t2.bottom_border.iter().rev().eq(t1.top_border.iter()),
        _ => false
    }
}

fn rotate_n(t: &Tile, n: u64) -> Tile {
    let mut res = t.clone();
    for _i in 0..n {
        res = rotate(&res);
    }
    res
}

fn rotate(t: &Tile) -> Tile {
    Tile {
        name: t.name,
        top_border: t.left_border.clone(),
        right_border: t.top_border.clone(),
        bottom_border: t.right_border.clone(),
        left_border: t.bottom_border.clone(),
    }
}

fn flip_v(t: &Tile) -> Tile {
    Tile {
        name: t.name,
        top_border: t.top_border.iter().rev().map(|x| *x).collect(),
        right_border: t.left_border.iter().rev().map(|x| *x).collect(),
        bottom_border: t.bottom_border.iter().rev().map(|x| *x).collect(),
        left_border: t.right_border.iter().rev().map(|x| *x).collect(),
    }
}

fn flip_h(t: &Tile) -> Tile {
    Tile {
        name: t.name,
        top_border: t.bottom_border.iter().rev().map(|x| *x).collect(),
        right_border: t.right_border.iter().rev().map(|x| *x).collect(),
        bottom_border: t.top_border.iter().rev().map(|x| *x).collect(),
        left_border: t.left_border.iter().rev().map(|x| *x).collect(),
    }
}

#[derive(Debug, Clone, Eq, PartialEq, Hash)]
struct Tile {
    name: u64,
    top_border: Vec<bool>,
    right_border: Vec<bool>,
    bottom_border: Vec<bool>,
    left_border: Vec<bool>,
}

fn parse_chars(s: &str) -> HashMap<u64, Vec<Vec<char>>> {
    s.split("\n\n").map(|t| {
        let title: u64 = t.split('\n').next().unwrap().replace("Tile ", "").replace(":", "").parse().unwrap();
        let chars: Vec<Vec<char>> = t.split('\n').skip(1).map(|line| line.chars().collect()).collect();
        (title, chars)
    }).collect()
}

fn create_tile(s: &str) -> Tile {
    let splitted: Vec<&str> = s.split('\n').collect();
    let name: u64 = splitted[0].replace("Tile ", "").replace(":", "").parse().unwrap();
    let tb: Vec<bool> = splitted[1].chars().map(|c| c == '#').collect();
    let bb: Vec<bool> = splitted.last().unwrap().chars().map(|c| c == '#').rev().collect();
    let lb: Vec<bool> = (1..splitted.len()).into_iter().map(|i| splitted[i].chars().next().unwrap() == '#').rev().collect();
    let rb: Vec<bool> = (1..splitted.len()).into_iter().map(|i| splitted[i].chars().last().unwrap() == '#').collect();
    Tile {
        name: name,
        left_border: lb,
        right_border: rb,
        top_border: tb,
        bottom_border: bb,
    }
}

fn parse_input() -> Vec<Tile> {
    let s = input();
    s.split("\n\n").map(|t| create_tile(t)).collect()
}

fn input() -> String {
//     "Tile 2311:
// ..##.#..#.
// ##..#.....
// #...##..#.
// ####.#...#
// ##.##.###.
// ##...#.###
// .#.#.#..##
// ..#....#..
// ###...#.#.
// ..###..###
//
// Tile 1951:
// #.##...##.
// #.####...#
// .....#..##
// #...######
// .##.#....#
// .###.#####
// ###.##.##.
// .###....#.
// ..#.#..#.#
// #...##.#..
//
// Tile 1171:
// ####...##.
// #..##.#..#
// ##.#..#.#.
// .###.####.
// ..###.####
// .##....##.
// .#...####.
// #.##.####.
// ####..#...
// .....##...
//
// Tile 1427:
// ###.##.#..
// .#..#.##..
// .#.##.#..#
// #.#.#.##.#
// ....#...##
// ...##..##.
// ...#.#####
// .#.####.#.
// ..#..###.#
// ..##.#..#.
//
// Tile 1489:
// ##.#.#....
// ..##...#..
// .##..##...
// ..#...#...
// #####...#.
// #..#.#.#.#
// ...#.#.#..
// ##.#...##.
// ..##.##.##
// ###.##.#..
//
// Tile 2473:
// #....####.
// #..#.##...
// #.##..#...
// ######.#.#
// .#...#.#.#
// .#########
// .###.#..#.
// ########.#
// ##...##.#.
// ..###.#.#.
//
// Tile 2971:
// ..#.#....#
// #...###...
// #.#.###...
// ##.##..#..
// .#####..##
// .#..####.#
// #..#.#..#.
// ..####.###
// ..#.#.###.
// ...#.#.#.#
//
// Tile 2729:
// ...#.#.#.#
// ####.#....
// ..#.#.....
// ....#..#.#
// .##..##.#.
// .#.####...
// ####.#.#..
// ##.####...
// ##..#.##..
// #.##...##.
//
// Tile 3079:
// #.#.#####.
// .#..######
// ..#.......
// ######....
// ####.#..#.
// .#...#.##.
// #.#####.##
// ..#.###...
// ..#.......
// ..#.###...".to_string()
    "Tile 3041:
#..##.#...
..#....###
.#..#.#.##
..#.......
#.#..###.#
.#....#..#
.........#
#...##.###
#.....###.
...##..#..

Tile 1747:
##..######
#####...##
..#.....##
#...##.###
#........#
###.#..#.#
#.##...#..
#..#.....#
#.#..#...#
#.#.#..###

Tile 2887:
##....#..#
##....#...
#...#..#..
...###.#..
.....#.##.
.....#....
##.##....#
#.......#.
###....##.
##..##.#.#

Tile 3001:
##.#.#.#..
##...####.
##....#.##
....##....
.......##.
#..#..#...
###..#.#.#
###....###
####...###
##..##.#.#

Tile 2267:
##.#.#.###
##....#..#
#..#....#.
..#.##..#.
##..#..#..
...#......
#.#.#.....
##........
...#.#..##
..##.#..#.

Tile 2797:
#.##.#...#
.......#..
#....#....
##..##.#.#
#......##.
.#.##.#.##
#......##.
####....#.
#.##....#.
####.#.###

Tile 1087:
#.#######.
##..##..#.
#.......##
.....#....
##...#...#
#....#...#
.##......#
.#..#.#..#
#...#..##.
.##..##.##

Tile 2237:
.#..####..
...####.##
##...#..#.
#..#.#...#
##.#......
.##.#..#.#
.#..##...#
...#....##
.....##...
.....##..#

Tile 3673:
##.###...#
#.##..#..#
#..####...
.#.####...
.....#.#.#
#..#..#...
###.......
#.#.......
#.......#.
##..###..#

Tile 1907:
...#.#.###
#.##.....#
.......##.
.##.#...#.
..#.##....
##..##....
#.........
##.#......
.......#..
#.#.###...

Tile 2437:
#.##.##..#
....#.....
..#......#
#...#.....
...#......
.....#...#
#.#.......
.#...#...#
#.#....#..
.##..##...

Tile 2897:
##..#...#.
..###....#
...#.##...
....#.##..
...##.....
#..#..#.##
..###.....
...##..##.
#..#......
#.#.##..#.

Tile 1103:
.####.#..#
..##...#..
#.....#...
##.#.....#
#.##......
.##...#..#
##.....#.#
##.....###
#.....#...
##.#...##.

Tile 1559:
...##..#.#
#..###...#
...##...##
#..#.#.#..
#......#.#
#..#.#.#.#
.#..#....#
....#..###
..##..##..
.#..##..##

Tile 3931:
##....##.#
.##..#...#
.......#..
#....#.#..
#.#..##.#.
.##.####..
.......#.#
.....#.#..
.#.#......
####..#.##

Tile 3331:
#.#.####..
.#.##...##
....####.#
.##......#
#.##.##..#
##..#...#.
#.##....#.
#.#.#.#.#.
...#......
###.##.##.

Tile 2089:
..########
##.#...##.
#...#.....
##......##
##..##..#.
..#.#....#
#..##....#
#..#.#...#
##..#....#
..######.#

Tile 1069:
.####..###
......##..
....#.##.#
#..#.....#
#...#...#.
#...#.##.#
...#.#...#
#.#.......
#.#.##.#.#
#..#.#.#..

Tile 1831:
#..#..##..
#...##...#
..##...#.#
#.......##
#........#
..#.......
##..###..#
#....###.#
...#......
##..#.....

Tile 1453:
.#.#.#..##
##.##...##
#....#....
#..#..#.#.
##.#..###.
...##.##..
....##..##
...##..###
##........
..##.#####

Tile 3767:
..#.#.#.#.
..........
#....#.#.#
#.....#..#
##..#..#..
...#..#..#
..#....#..
......#...
#..##.....
.#....##.#

Tile 1693:
#.###..###
#...#...##
#......###
#....#...#
......#..#
###...#...
####..##..
...#..#...
##..##.###
#....#.##.

Tile 3631:
....#.##..
..#...#...
#.###..#..
....#.#..#
#..#..##..
#....#.#..
#.##..#...
#........#
.....#...#
...#......

Tile 2999:
#...###..#
#.#.##....
#.........
##.......#
#.#.##.###
.....##.##
.#.##..##.
#...###.##
.#.....#..
..#.#.###.

Tile 2417:
..#.#.#...
##.#..#.##
#.##....#.
#.........
...#..#...
.#...#.###
.#.###...#
#........#
#.#..#....
#.##.#...#

Tile 3919:
##........
#.#.......
.#.#.#....
...#...#.#
...#...##.
##.....###
#.#.#.#...
###.#.....
.#.#..#.##
##.#...##.

Tile 3557:
##.#.###..
.##...#..#
.#.#...#..
....###...
.....#####
###.#....#
.#..##..#.
#..#....#.
..........
....###.#.

Tile 3851:
.##.###.##
..#......#
......#..#
#.#.......
......##..
##...#....
..#..#...#
...#.#....
.........#
.#.##..###

Tile 1013:
##.##.##..
##........
...#......
#.....#...
#.#..#...#
.#......##
...##.#.##
..#..##..#
.#...#..#.
..#..###.#

Tile 1549:
..#...##.#
..#......#
##....#.#.
.......##.
..#...#..#
#.#..#..##
.......#.#
.......#.#
#...##...#
.######...

Tile 2179:
.##.##.#..
.##.###...
.........#
..#..#..#.
..#####...
...#..#..#
...#....##
#........#
#.........
###.###...

Tile 1697:
###..###.#
##...#....
####...#.#
.#.....##.
....####.#
#....##.##
..#.##...#
.........#
###..##.##
#..##.####

Tile 1307:
##......#.
..........
....#....#
#...#.#.#.
.###.....#
#..##.#..#
..........
.....##.#.
...####..#
..#..#.#..

Tile 3929:
###.#.##..
##........
###....###
...#..#..#
...#.....#
..#.###...
..........
.....#...#
#.......##
##....#.#.

Tile 1949:
..####.#.#
.#..#...#.
#..#....##
#.....###.
.........#
..#..#...#
.....##...
.....#....
.#.#.#.#..
####.#####

Tile 2081:
##.##.####
.#........
#...#.....
.#.##..#.#
....###..#
..#..#.#..
#.#.#.##.#
..#..#..#.
#...#.#...
.##.#.####

Tile 1433:
#####.##..
#.....#...
####..#...
...####...
......#.##
..##...#..
#...#.#.#.
#....#..#.
#......#.#
##..###..#

Tile 3433:
#.......##
#....#....
#...#.#..#
..#.##...#
#...##.#.#
##.####..#
..##.###.#
#.#....#..
##.#.....#
.#....#..#

Tile 3607:
##.#.#.#.#
...#..#.#.
#.#..#.#..
#.......##
..#..##...
#.....#...
#...#..#.#
...#....##
#..#..#.##
##.#..#.#.

Tile 2677:
.###..#..#
###......#
..........
##..#...#.
##...#.#..
..#.......
#...#...#.
#......#.#
##.#.#.#.#
###...#...

Tile 3461:
...##...##
#.#...##.#
#.....##..
#..#....##
#.#....#.#
..##.##.#.
#.........
..#.#....#
#....##...
.#.##.####

Tile 3911:
#.#####.##
#..#.....#
#..#......
.##....##.
#..#..#..#
.....#.#.#
#.......##
......#...
####...##.
..#..#.#..

Tile 2729:
##..##.##.
.#..#...#.
#....###..
.....##...
#..#..#..#
....###..#
#....##.##
#..#.###..
#.....#...
...##.#...

Tile 2549:
.#.##.#...
#..#.#.#.#
.........#
.#..##..##
#....##...
##..#.##.#
.#...##...
#...#.....
..#.......
#....#....

Tile 1699:
.######..#
....###..#
.####..#..
#....#....
.##.#...#.
#.......#.
.#.#.##..#
#..#......
..........
#.##..##..

Tile 2221:
#...##.#..
....#....#
#...#....#
#........#
#.......##
##.#..#...
#.#.###..#
#..#.....#
......#.##
..#.####.#

Tile 2129:
....#####.
.##..#...#
......#.##
#.#...#...
#..#...###
###.#..#..
.....#...#
...#......
#...#.#...
#.###.###.

Tile 1973:
.......###
..........
#.#.#.....
.........#
....#..#..
...#...#..
##.....#.#
#..#...#.#
#.#......#
#...#.#.##

Tile 3943:
...###....
........##
.##.......
##.#....##
..#.#..#..
..##...#..
#.##....#.
.#####.#..
###..##.#.
...#..#.##

Tile 1451:
#..###..#.
#..#....##
....#...##
##.......#
#.........
..........
...#...#..
..#....##.
...#..#.#.
.##...##.#

Tile 1759:
.#..##...#
##........
##..#.....
..........
.###...###
..##..#..#
.......###
#..#..#..#
.##....#..
...##.#..#

Tile 2963:
##.##.#.#.
....#.....
#.....##.#
.##.#..#.#
.###..#.#.
#.##.##...
....#....#
#.....#...
.#.##.###.
.#..#.....

Tile 3313:
#.#...#...
..##..#..#
#####.##.#
#.....##.#
..#..##..#
##.###....
...#.#....
.......#.#
##.....##.
#.#.#####.

Tile 3221:
.#...##...
#.##...###
####...##.
.##.......
##..#...#.
...#.#.###
#...##..#.
##...#..#.
#.#...##..
##...#.##.

Tile 3989:
###...#.##
#.......##
#.......#.
#...#....#
#.........
...#.##...
..#....#..
..........
.#......#.
#.##.###..

Tile 2069:
#..#..##.#
#.####....
#..#......
#..##..#.#
#......###
#...#.....
#...#..###
......##..
#..#.####.
#.#..#..#.

Tile 1871:
#.##..####
.#.##....#
###.#.#..#
#....#...#
......#.##
#.....####
#.....##.#
#...#....#
....#.....
.......#.#

Tile 2083:
.#.##.#...
#..####..#
##.#.##.##
..#.##....
#.#..##...
..#.#..#..
...#..#...
.#..#.##..
###..#.###
#...#.#...

Tile 2309:
.##.#...#.
#..##..#.#
...#......
.#..#.....
#..##...##
.#...#...#
...#.#....
.....##...
#.##....##
...##..###

Tile 3413:
.....####.
..#.###...
..#.#....#
##.##.....
..##...###
##..#.....
##.#.....#
###.######
#..##.....
#.#...#.#.

Tile 1039:
#.##.#.#..
#...#.#...
...####.#.
..#..#.#.#
...#.##..#
#...###..#
....#..#..
##....##.#
.#...#....
#...#.#..#

Tile 2029:
##..##.#..
#.........
#..#......
.##.......
.....#..#.
.##..##...
......#...
#....#.#.#
..##.#....
...#.#.#..

Tile 2281:
######.##.
#...##....
......#.#.
##..#.##..
#..####.##
#....#.#.#
#........#
........##
.##....##.
..###.....

Tile 3259:
#...##.#.#
...#....#.
..#.#...#.
###.......
.####.#.##
#..#...#.#
#....#.##.
#..###..#.
#.###..#.#
#.#...###.

Tile 2087:
###.###.#.
#.........
#.......#.
##....####
#.##...#..
#..##.#.##
.##...#...
.##..#..#.
#.....#...
##..#.#...

Tile 3391:
.##.#.#..#
##.#.#...#
#..#......
...#......
#..#......
..........
...###...#
.........#
##..#....#
..#.#....#

Tile 2693:
#...#.##..
#..##....#
.#.#....#.
#.#.#...#.
#.##.....#
...#......
..#.#.##.#
#.......#.
...#.....#
..###..##.

Tile 1279:
#.#.....##
.........#
#.#..#.#.#
#..#.....#
#..#......
###.....##
.###...#.#
#.##.....#
#.##......
.#..####..

Tile 2459:
####...#.#
#.#....#.#
#........#
.#........
##......#.
#...#.#..#
###....#..
..##.##..#
#.#.....##
#.#.#.....

Tile 2297:
.##.####..
#...#...##
##........
.##...#.#.
.....#.#.#
#........#
......#.#.
#...#...##
#.#.....##
.##..##..#

Tile 3217:
.##..##..#
#...#.#...
.#.##.#...
##.##....#
#...##..##
..###...#.
.........#
#..#.#....
.#..#...##
#....##..#

Tile 2467:
#.#.##.###
.....#...#
.#........
#...##.###
.#.......#
#...#.##.#
#....#....
#...#....#
...##.##.#
....#..#.#

Tile 2939:
##.###.#..
...#..#..#
.#..##....
#.#.......
##....#...
.##...##..
##.#.....#
#..#..#.##
..........
###..##.##

Tile 1459:
#.#.##.###
..##.#...#
#..#.#.##.
#....###..
##...#...#
.##.#.....
.##.#.##..
#.....#..#
#.#.##....
..#....##.

Tile 3583:
.#..#.#.##
#..###.#.#
.#....#...
.#.##....#
...#.....#
...#.#...#
....###...
.....#....
..#.......
.#.#.###..

Tile 3209:
#.#.######
.#....#.#.
..#.......
#.#.....##
#..#.....#
.#.......#
#.##.#....
....##....
.#.##.#.#.
#...#.#...

Tile 1471:
#.###..##.
........##
.#....##..
####.#...#
...#......
#....#....
#.....#.#.
#.#......#
##.#.##..#
.#.#.###.#

Tile 3533:
....#..#.#
###...#...
..#.#..#..
...#..#...
#.#.#..#.#
.#..##..#.
#..#.....#
.....#.#.#
........##
..#.#.##.#

Tile 2389:
.....##...
..#....#.#
....#...#.
#.....#...
#..#....##
#.#.#.....
#........#
#.........
....#.#...
....##..##

Tile 3023:
....#.###.
#...#.#.##
#.#.#.....
#..#.#..##
....#....#
....######
#...#.....
.#....#.##
#......#..
#.##...##.

Tile 1367:
.#...###..
#...##.##.
.#.....#.#
.#...#...#
####.#....
.##.......
.#.....#..
...#.....#
..#......#
###..#..#.

Tile 1789:
.##..#..##
....#.##..
.####.....
#...###..#
#..#..###.
.##.#.....
..#.##....
.....#....
.......#..
.#..##....

Tile 3011:
#.###..#.#
.....#...#
...#..#..#
#.###..#..
#..#.#..##
..##......
.#...#...#
...#..#...
.#.###...#
.#.##.....

Tile 3547:
.###.#...#
.##....#..
...#.##.##
#.#.......
.......#.#
......#..#
#..#...#..
...#.####.
#....##.#.
....#.##..

Tile 3671:
##.#..#.#.
##..##.#.#
...###....
#.#.###..#
#..#...#..
..#......#
#.#...####
.....#...#
.#...##..#
..###..#..

Tile 3529:
#.#.#..#.#
##.....#..
.##..#....
#.#....###
#.##.#..##
#....#.#.#
.....###.#
....#..#.#
.#..#....#
.###..##..

Tile 2251:
.####.#.##
#.....#...
.#...#.#.#
...##.....
##.......#
.....#....
...##....#
#..#..#...
#########.
#.........

Tile 2927:
.#...#####
.###..#...
...#...#..
##.#...##.
...#.....#
#.###...##
.....#..#.
#....###.#
#........#
.##..##...

Tile 3467:
#...#.#.##
.....#....
...###..##
#...#.#...
...#.#.#..
....#.....
.....#.#..
..#.#...#.
.....##...
#..#..#...

Tile 2341:
#.......##
..##..#.#.
.....##..#
#..###.#..
...##.....
##..#..#.#
###..#.#.#
.#..#..###
...#..##..
.#.#...###

Tile 1847:
#..##..###
#....#.#.#
.#..###...
#....#...#
#.#..##..#
##.####...
#.#.......
..........
.#..#...##
##..#..##.

Tile 1597:
#.#.#....#
#......###
.#..#....#
.#....####
#.#..#..##
#...#..#.#
#.##.##..#
###...#...
#..##.#...
.###..#.#.

Tile 2789:
.#####.#..
....#.....
.........#
#.##....#.
..#.#.#...
#...##....
#..#...#.#
#..#.....#
.....#....
.#..####.#

Tile 2441:
##.#.#....
#.#.......
.#...###..
..#....##.
.......#.#
.......#..
.#...##..#
####......
##..#....#
##.##.###.

Tile 1303:
.##...#...
#........#
###....#.#
.....#....
.....#....
#.....#..#
.........#
.####.#..#
..##...###
####..###.

Tile 2339:
..#..##.##
...#....##
##.#.#....
#..##.##.#
.####..#.#
#.........
.#...#..#.
......#..#
#..###...#
.##..#.#.#

Tile 3079:
####...#.#
...###..##
.........#
.##....#..
##..#..#..
...#..##.#
#.#....#..
##........
#.#.####..
###.#.#..#

Tile 1877:
..#.#.#..#
#.#.#.#...
#....##...
..##.#..##
##.#..#...
#..#......
#...#.#..#
.....###.#
..#..##..#
########.#

Tile 2663:
##.##....#
#......##.
#.#...#..#
##.###....
##..#.#.##
#...#..#..
#..#....#.
..#.#...##
#..##...##
.....###.#

Tile 1109:
###....##.
#........#
#.........
...#..####
..##..##.#
.....##..#
.#...#.#.#
#...#...##
..........
...#.#.###

Tile 2971:
...##.####
#..#....##
#...#.#.#.
#...#.##.#
...#.....#
.#........
#.....#.#.
.#####.#.#
##..#...#.
###.#..#.#

Tile 2053:
.###.###..
####.#..##
..#...##..
##....##.#
#.#..#.###
..#.......
.#.##...#.
#...##..##
..#...#..#
#.#....###

Tile 2647:
.###.#.###
#........#
#....#..##
........#.
##....##.#
##....##..
....#..#.#
...#.....#
##.......#
##.#...#.#

Tile 1423:
####.#....
#.....#...
#.#....#.#
...#.....#
..#.......
#.#.......
##..#....#
##.##.#...
#...#.....
...#.##.##

Tile 2767:
..#.##..##
#...#..#.#
#.#....#..
#.......#.
.......#..
.#...#.#.#
.##.#..#..
.....##..#
#.......##
##....####

Tile 2203:
.#...##.##
#.##...#.#
.#........
...#.##..#
###....###
.#.....#.#
#.#.##...#
...#.#.#..
.....#....
#.####.##.

Tile 1667:
....#.##.#
#..#...#..
.#...#...#
.#........
.#........
...#.....#
..#..#...#
##...####.
.#.....#..
#..#......

Tile 2633:
.#.#######
#..###....
........#.
#.........
.....##.#.
#.#......#
#.#.......
..##.....#
....##....
.#..####.#

Tile 3539:
####.##..#
..##....#.
..#.#.##.#
...#.....#
#.........
.......#.#
...#....#.
###..####.
.##......#
..#..#####

Tile 2381:
.######...
##..###...
#......#.#
........##
.#.....#.#
##..##...#
.#.......#
#.........
...##....#
....##...#

Tile 1153:
..##.##..#
.....##.#.
.....##...
..#.....##
##.#..#...
#.....#..#
#....#..#.
#....#.#..
..#..#..#.
.#.##.....

Tile 2011:
#.##..#...
#.##.....#
...#..#...
###.......
#....#..#.
..##......
##..#..#..
..##....##
#..#..#...
##.####..#

Tile 2731:
........#.
#........#
##.#.....#
#.....##..
#.....#...
#.#......#
...#.###.#
#.#.#....#
.#.#...#.#
#...###..#

Tile 3643:
.#...#.###
..#...#..#
#....##..#
...##.#.#.
.#.....#..
...#.##..#
.####.##..
#..#..####
....#....#
####.####.

Tile 2917:
..########
#......#.#
#..#.#..##
#...#...##
#..##....#
...#..#...
..#......#
...#...#.#
#.....#..#
.#.#..####

Tile 1951:
#.#.#..##.
..........
..#.#.#.##
#.#.......
.#..#...##
...##..#.#
#...#..#..
.#..#.....
#.#.....##
.#####....

Tile 2593:
..#####.#.
.#...#....
##..###..#
###.##..##
.#....##.#
.#..##....
#.#..#..##
.....#....
.....#...#
.####..#..

Tile 2953:
..#..#.#.#
...#..#...
##.....#.#
......#..#
#........#
..#..#...#
#.........
###.#.##..
##..#..#..
.###.#..#.

Tile 3769:
......#...
.#.##.#...
.##......#
##........
#.....###.
....#...#.
..........
#.....#.##
..........
.##..##.##

Tile 2423:
####..#.##
.#..##....
#.#.#.....
.........#
..........
..#..#....
.#.#..#..#
#.........
#..#..#...
##.#......

Tile 3329:
..#####.#.
.#....##.#
###..#####
##...#...#
#.........
#.........
...#.#...#
....#...##
#...#.#...
#.........

Tile 1249:
..#..###.#
......#.#.
##...#....
..........
##.......#
#......#.#
#..#.#..##
.#.......#
###....#.#
.##.....#.

Tile 3343:
##..#...#.
##.#..####
........#.
...#......
......#...
#.....#...
.#.#.#....
......##.#
..#.##...#
.#.#..####

Tile 2017:
##.##.#.##
...#......
.....##.#.
..#...#...
#.#....#..
#....#...#
#....#...#
#...##....
.....#.#.#
....#.#.#.

Tile 1151:
##..##....
..##.....#
#.####.##.
...##....#
..##.....#
....#....#
.#.##...##
......#..#
#..#.#.#..
#.###...##

Tile 3697:
###.....#.
..##...##.
......#.#.
.#...#.#.#
.#...#...#
.#.....#..
#...#.#...
#..#....#.
.#..##...#
..#.#.##..

Tile 1487:
..#####.##
#.........
#.#...#.##
##.##.....
.##.#....#
..#....###
#.........
..#.......
#.##..#...
.####..##.

Tile 1481:
..#..#..##
#.#..#.##.
#..##....#
##.....#..
.#...##.##
.#......#.
..#..##...
###...###.
..#...##..
#...##.#..

Tile 2903:
#..#...###
#..#####.#
..#.......
###..###..
.#........
#.#.#....#
..#..#.###
##..#.##..
...#......
.##.##.#..

Tile 1171:
.###..####
....#..#..
....#..#.#
#.....##.#
##...##...
#..#.##.#.
##..##...#
#..##.#.#.
#.#..##.#.
##.##....#

Tile 2621:
#...###.##
.#.....##.
.#..#...#.
...#..#.##
.#..##..#.
##..#..##.
...##...#.
.#..#...##
....#....#
...##.####

Tile 2671:
...#####..
........##
#....##..#
##........
##..##.#..
..#.....#.
#.........
..##.....#
##....#.##
###.#...##

Tile 2357:
.##.##....
#...#....#
...##..#.#
#.##...#..
##.###..##
..#..#####
...#.###.#
...##....#
..#.####.#
#..##..###

Tile 3617:
...##.#...
#####..#.#
....#....#
......#..#
#...#.....
...##....#
....#.....
#..#...##.
#...#...#.
....##...#

Tile 3517:
#.#..#..#.
#......#.#
.#.#..#.##
...##...#.
#.##..##..
...#..#.##
#...#.##..
.#..#..#.#
....#...##
..###.###.

Tile 1499:
.#..#....#
...#.##..#
#...#..#..
..##...#..
#....#.#.#
#..#.#..##
##.##..#.#
.##.#..#.#
#.###..##.
##.##.#.#.

Tile 3581:
###.#.###.
.#..#....#
###....##.
..#.#...##
##..#..#..
.....##...
........#.
.#.....##.
#.#...##..
###.#.#..#

Tile 2687:
.#####...#
.......#..
.#..#....#
...#......
##....#..#
#.#..#..#.
##..#.#.#.
..#....###
.#........
#...#..#..

Tile 1657:
...#...#.#
.#.##.#..#
....#...#.
...##.##..
....#.#.##
#..#..#.#.
...#.#.#..
...##....#
#...#.#..#
.##.##...#

Tile 3449:
#.....###.
#..#.....#
#......##.
....#.....
##....#...
.....#...#
..........
#......###
.#....#...
###...#...

Tile 3797:
#.#######.
..#.##.###
...#.#...#
##.##.##.#
#.......#.
.#......##
##...#####
..#.##.###
#.#.##...#
##..#.#.#.

Tile 1511:
#.###.###.
.##.#....#
........##
##..#..#..
..#####.##
.....#....
.......#..
...#......
##........
...#.#####

Tile 2311:
..#.####..
......#..#
.###..#.#.
##..#.###.
...#...#..
.......###
##.#......
.####...##
##.##..###
#...#..###

Tile 1123:
.##.##....
#....##...
#..#.....#
#........#
....#.....
#...##.#.#
#.#.##..##
...#...##.
#..#...#..
##.#.#.###".to_string()
}
