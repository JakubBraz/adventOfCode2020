use crate::day18::Operator::{ADD, MULT};
use std::mem::swap;
use std::collections::HashSet;

pub fn part1() {
    let vals = parse_input(&input());
    let result: u64 = vals.iter().map(|line| solve(line, &vec![])).sum();
    println!("{:?}", result);
}

pub fn part2() {
    let vals = parse_input((&input()));
    let vals: Vec<Vec<char>> = vals.iter().enumerate().map(|v| add_brackets_to_plus(v.1)).collect();
    let result: u64 = vals.iter().map(|line| solve(line, &vec![])).sum();
    // let result: Vec<u64> = vals.iter().map(|line| solve(line, &vec![])).collect();
    println!("{:?}", result);
}

#[derive(Debug)]
enum Operator {
    ADD,
    MULT,
}

fn add_brackets_to_plus(arg: &[char]) -> Vec<char> {
    let num = arg.iter().filter(|&&c| c == '+').count();
    let mut res: Vec<char> = arg.iter().cloned().collect();
    for i in 0..num {
        res = add_brackets_to_nth_plus(&res, i);
    }
    res
}

fn add_brackets_to_nth_plus(arg: &[char], n: usize) -> Vec<char> {
    let mut res: Vec<char> = vec![];
    let mut i = 0;
    let mut is = 0usize;
    for &c in arg.iter() {
        match c {
            '+' => {
                match is as usize == n {
                    true => {
                        res.push('(');
                        res.push(c);
                        res.push(')');
                        res.extend_from_slice(&arg[i + 1..]);
                        let r = sort_brackets(&res, i + 1);
                        return r;
                    }
                    false => res.push(c)
                }
                is += 1;
            }
            _ => res.push(c)
        }
        i += 1;
    }
    unreachable!();
}

fn sort_brackets(arg: &[char], ind: usize) -> Vec<char> {
    let mut to_swap: Vec<char> = arg.iter().cloned().collect();
    let new_pos = find_left_legal_position(&to_swap, ind - 1);
    to_swap.remove(ind - 1);
    to_swap.insert(new_pos, '(');
    let new_pos = find_right_legal_position(&to_swap, ind + 1);
    to_swap.remove(ind + 1);
    to_swap.insert(new_pos, ')');
    to_swap
}

fn find_left_legal_position(arg: &[char], ind: usize) -> usize {
    let mut res = ind;
    let mut passed = 0usize;
    while !(left_legal(arg, res) && passed == 0) {
        res -= 1;
        if arg[res] == ')' { passed += 1; } else if arg[res] == '(' { passed -= 1; }
    }
    res
}

fn find_right_legal_position(arg: &[char], ind: usize) -> usize {
    let mut res = ind;
    let mut passed = 0usize;
    while !(right_legal(arg, res) && passed == 0) {
        res += 1;
        if arg[res] == '(' { passed += 1; } else if arg[res] == ')' { passed -= 1; }
    }
    res
}

fn right_legal(arg: &[char], ind: usize) -> bool {
    if ind == arg.len() - 1 { return true; }
    match arg[ind + 1] {
        ')' | '*' | '+' => true,
        _ => false
    }
}

fn left_legal(arg: &[char], ind: usize) -> bool {
    if ind == 0 { return true; }
    match arg[ind - 1] {
        '(' | '*' | '+' => true,
        _ => false
    }
}

fn solve(arg: &[char], acc: &[char]) -> u64 {
    if arg.len() == 0 {
        let (nums, ops) = to_vec(acc);
        return solve_basic(&nums, &ops, 0, &ADD);
    }

    match arg[0] {
        '(' => {
            let mut old: Vec<char> = acc.iter().cloned().collect();
            let i = find_matching_bracket(arg);
            old.extend(solve(&arg[1..], &(vec![])).to_string().chars());
            solve(&arg[i + 1..], &old)
        }
        ')' => {
            let (nums, ops) = to_vec(acc);
            solve_basic(&nums, &ops, 0, &ADD)
        }
        _ => {
            let mut old: Vec<char> = acc.iter().cloned().collect();
            old.push(arg[0]);
            solve(&arg[1..], &old)
        }
    }
}

fn solve_basic(nums: &[u64], ops: &[Operator], acc: u64, op: &Operator) -> u64 {
    if nums.len() == 0 { return 0; }
    if nums.len() == 1 { return calc(acc, op, nums[0]); }
    solve_basic(&nums[1..], &ops[1..], calc(acc, op, nums[0]), &ops[0])
}

fn find_matching_bracket(arg: &[char]) -> usize {
    let mut temp: usize = 0;
    for i in 0usize.. {
        if arg[i] == '(' { temp += 1; }
        if arg[i] == ')' {
            temp -= 1;
            if temp == 0 { return i; }
        }
    }
    unreachable!()
}

fn calc(x: u64, op: &Operator, y: u64) -> u64 {
    match op {
        MULT => x * y,
        _ => x + y,
    }
}

fn to_vec(arg: &[char]) -> (Vec<u64>, Vec<Operator>) {
    let mut nums: Vec<u64> = vec![];
    let mut ops: Vec<Operator> = vec![];
    let mut temp: Vec<char> = vec![];
    for &c in arg {
        match c {
            num if num.is_numeric() => temp.push(num),
            _ => {
                nums.push(temp.iter().collect::<String>().parse().unwrap());
                temp = vec![];
                ops.push(match c {
                    '*' => MULT,
                    _ => ADD
                });
            }
        }
    }
    nums.push(temp.iter().collect::<String>().parse().unwrap());
    (nums, ops)
}

fn parse_input(arg: &str) -> Vec<Vec<char>> {
    arg.split('\n').map(|line| line.replace(' ', "")).map(|line| line.chars().collect()).collect()
}

fn input() -> String {
    // "5 + (8 * 3 + 9 + 3 * 4 * 3)".to_string()
//     "1 + (2 * 3) + (4 * (5 + 6))
// 2 * 3 + (4 * 5)
// 5 + (8 * 3 + 9 + 3 * 4 * 3)
// 5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
// ((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2".to_string()
    // "7 * 5 + ((2 * 7 * 5 + 2 + 6 + 3) * 9) * 5 + ((2 * 2 * 4 + 3) * 5)".to_string()
    "(7 * (7 * 6 * 4 + 3)) * 3 + ((8 + 5 * 3 + 7 + 8) + 3 * (2 + 9 * 5 + 7 * 5 * 6) * 2 + 3 * 9) + (4 + 5 + 5 * 2 + 2) + ((5 + 6 + 9 + 6) + 3 + 4 * 6 * 5)
7 * 5
(9 * (9 + 7) * 7 + (4 + 5 * 5 + 2 + 3) + 3) * 7 * 5 + 8 + (4 + (7 + 9 + 6 * 9) * 2)
((6 + 4) * 6 * (5 + 3) * 9 * (3 * 5 * 5 * 9 * 4 + 9) * 4) * 2 * 8 + 9
7 * 7 + (9 + 2 * 9 + 9)
9 + (7 * 7 * 5 * 9 * 7) * 2 + 3 * 3
5 * (5 * (8 * 4) * 7 + 8 + 7) * (5 * (4 * 3 * 5 + 2 * 5) + (6 * 6 * 7 * 2 + 2) + 4) + (5 + 4 * 7 + 5 * 9 + 9) * 2
((7 + 3 + 8) + (2 + 6 * 4 * 5)) + 8
8 * (6 * 7 + 3 * (8 * 5 * 2 * 4)) * (3 + (5 + 5 + 6) * (4 * 3 + 7 * 5 + 7) + (3 * 5 * 9 * 3)) + 8
6 + 4 + 8 + 4 * ((3 + 5 * 8) + 7 * 7 * 8 * 7 * 2)
3 * (9 + 4) * (9 + 2 + 6 + 5) + 4 * (7 * 2) + 6
4 * 6 + (8 + 3) + 7
2 + (8 * (5 + 6 * 5) + 9 * 7 + (7 * 7)) + 5 + 5
(8 + (5 * 7 * 3 + 6) + 8) * 8 + 6
8 * 6 * 6
8 * 6 + (9 + 4 * 5 * 3) * 9 * (4 * 2 + 6 + 7 + 4 * 8)
(5 * 9 * 8 * 9 * 6) * 8
7 * 5 + ((2 * 7 * 5 + 2 + 6 + 3) * 9) * 5 + ((2 * 2 * 4 + 3) * 5)
(2 + 3 * 4 * (2 + 4 * 9 + 8) * 8) + 6 + 8 + 7 * 2
3 + 7 + (3 * 4 * (8 * 6 + 8 * 8 * 2 + 9)) * 4
9 * 9 + 9 + (3 * 7 * 9 * 4)
(7 * 7 + (2 * 5 * 8) * 4) * 9 + (9 + 4 * 8 * (9 + 3 * 5 * 4 * 7 * 4)) + 3 * 3
7 + 6 + 3 * 8 * 4 * (9 * 4 * (5 + 7 * 2 * 8 + 7 * 8))
(7 + 2) * 5 * 8 + 6 * 2
9 + 4 + (5 + (7 * 7 * 9 + 5) + 6 * 5 + 2 * (4 * 7 * 7 + 8 * 5 * 5)) * 2 + 2
8 + 2 * 2 * (2 + (2 + 7 + 7 * 7 * 3) + 7)
3 + 4 * (3 + 3 * 3 + 4) * 9 * 6 + 8
((4 + 4 + 6) + (5 * 5 + 4 * 9 * 5) + 5) + 2 * 2
9 * 5 * 6 * 2 + 6 + (2 * 9 + (2 * 3 + 4))
(3 * 9) + 2 * (2 * 5 + 7 + 9 * 7 * 6) + 5 * 5 * 2
7 + 3 + 5 * 6
7 + 5 + (2 * 8 + (6 * 6) + 6) + (4 + 7)
2 * (9 + 5 * 3 + 5 + 5 + 4) * (3 + 4 + 3 + 5 + 2 + 7) + 2 * 2
(4 * 5 + 6 * 3 + (5 * 3)) * 5 + 5
9 + 8 + 7 * (7 + 9 + 2 * 2 + 7) * 7
3 * 3 * ((4 + 3 * 4 * 2 * 2 * 6) * (9 + 6) * 3) * 5
9 + 6 + 7 + 6
8 * (4 * 8 * 8 * 7 + 4 + 9)
2 + (7 * 9 * 2) + 6 * 6 * 4 * 6
((4 * 6 + 7 + 9 * 4) + 9) * 4 * ((6 * 3 + 3 + 9 * 7) * 8 * 4 * 5 * (2 * 6 * 8 * 5 + 5 * 3)) * 7
(4 * 7) + 5
6 + 9 * 6 + 9 + ((5 + 7 * 5 * 8) + 7 + 7 + 8 * (2 + 8 * 2 * 4 * 7 + 9) * 7)
6 + 3 + (9 + 6 * (4 + 7 + 4 * 6 * 7)) + 6
5 * 7 * (4 * 6 * (3 + 8 + 6 * 8)) + 8
(5 * 6) * 8 + 2 * 3 + (7 + 4 + 3)
3 + 4 * 9 * 2 + (7 + (5 * 9 * 7 + 7 * 4) * 4) + 3
2 * 9 + ((3 + 5 + 2 + 9 * 9 + 6) + 4 + (6 * 4) + 2) + 3
3 + 6 + (3 + 6 + 8 + 2 + 2)
8 * ((8 * 6) + (7 + 2 * 2 * 2 + 4 * 3) * (9 + 8 + 4 * 8) + 8 * 4) + 2
9 + 4 * (7 * (2 * 4 + 9 * 3 + 7) * 8 + (4 * 3 * 9 + 9 * 5 + 7) + 9 * (6 * 4 * 2)) + ((5 + 6 + 7 * 9 * 6 + 6) + (6 * 2 + 8 + 9 + 4 + 4) + (8 * 5 * 2 + 6 + 7) * 5 + 3) * 9 * 8
9 + 2 + (5 + 3 * 2 * (7 + 4 * 5 * 5 + 3 * 7) * 8 * (5 * 6))
7 * (3 + 3 + 7 * 7 * 9) + (2 + 5 * 6 * 4)
9 + 8 + 9
8 * (7 + (5 * 7) + (7 + 3) * 2 + 7) + 4 * 3
2 * (2 * 6 + 5 * 7) * 2 + (3 + 3) * ((2 * 3 + 2) + (5 * 3 * 4 + 8 * 2))
4 * (3 + 7 + 6 + 8 + 3 + 6) + 8 + (2 * 3 * (5 * 2 + 6 + 5 * 8))
2 + 5 + 3 + 2 + 4 + (2 + (6 + 4) + 5)
2 * (4 * 4) + (5 + 2 * (4 + 2 * 2 + 4) * 4 + (5 * 9 * 9) + 2)
(6 + 9 + (3 + 5 * 3) + 4 * 2 * 2) + 7 + ((6 * 6 + 4 * 5 * 5 + 4) + 5) + ((8 + 4 + 9 * 8 * 9 + 2) + (7 + 2 + 9) + 4) + 5
7 * 3 + (6 + (8 * 5) * 6 * 8) * 2 * 9 * 4
9 + 9 + 9 + 2
(7 * 9 * 2 + 8 * 7 * 4) + 9 + (9 * 6 * 9 + 7) * 3 * (9 * 5 * 5)
4 * 7 * ((7 + 9 * 5 * 4 + 7 * 4) + (2 + 3 + 5 * 4 + 2) + (2 + 5 * 8 * 5 * 5 + 6)) * 6
5 + 8 * (9 + (9 + 3 + 9 + 5 + 5))
(3 * 7 * 2 * 3 + (8 + 8 + 3 * 9)) + 8 + 8 * 6 + 8 + 6
9 + 4 + 8 * (7 * 8 + 8 + 4 * 8)
2 * 9 + 2 * (5 + 3) * 2 * (5 * 5 * 8 + (3 + 4 + 4 + 5) + 4 * 4)
5 * 7 + 2 * ((2 * 8 * 8 + 8 * 2 * 7) * 6 * 7 + 7 + 2) * 2 + 9
4 * (6 * (6 * 3 * 3)) * (7 * 5 * 4 * 2 * (5 + 5 + 8 * 3)) + 7 + 7 * 8
3 * 2 + 4
9 + 6 * 2 * 4 + 2
((5 * 5 + 3 + 7 * 2) * 2 * 5 + (9 + 9)) + 3 + 6 * (9 + 8) * 8 * 9
4 * (8 + 2 + 3 * 9 * 6) * 6 * 3
2 * (9 * 6 + (8 + 6 * 4) * (5 * 5) + 9 * 2)
6 + (3 * (6 * 6 + 4 + 5) + 3 * 5 * 4 + (6 + 9 + 4 * 5 * 3)) + 6 * (3 + (6 + 5 + 5 + 6) * 8 + 8 * 4) * 4 + 6
9 * 9 * 2 + (6 * 4 * 2 + 4 * 7 * 9) * 7 + ((5 + 6 + 7 + 7) * (7 * 3 + 9) + 9)
(2 + (6 + 8 + 6 * 5 + 5) + 8 * 5) * 9 + 3
2 * 9 + 2 + (9 * (4 + 6 + 4 + 2) * 9 * 5 + 7 + 2)
8 + 6 + 4 + 6
3 + ((6 * 4 + 2 + 4 + 3 + 8) * (4 * 3) * (9 + 4 * 6 + 2 * 7 * 6)) + 5 + 7
3 * (8 * 4 + 9 + 4) * 7 * 2 + ((5 + 9 * 6 * 4 * 4) * 8 * 4 * (6 + 2))
((8 * 7 + 6) * 3 + 2 + 5) + 8 * 5 * 8
(3 * 2 * 6 * 3 * 2) * 6 * 2 * 9
(4 * 8 * 3 + 5) + (8 + 9) + 7 * 7 + 3 * 3
(2 + 7 * (7 * 8)) + 8 + (6 * (4 * 8) * 4 * 2 * 8) * 4 * ((7 + 8 + 4 + 3 + 6) * 4 + 9 + 4) + 3
((7 + 2 + 3 * 3) * 5 * 5 + 4) + 9 * 2 + 7 + 9 + 2
(6 + (2 + 7)) * 4 + 7 + 8 * 5
(9 * 8) + (8 + (2 + 4 + 5 + 6 * 9) + 2 * (8 + 9))
2 * (9 + 8) * 8 * ((7 * 6 + 7 * 3) + 2 + 5 * (7 * 2 + 7 + 8) + 3 * 3) + 8
4 * 6 + 6 + 4 * 9
(2 + 4 + 5 + 3 + 6) + 3 * 3 * 3 + (5 * 2 * 9 + 6 * 6 + 5)
7 * 5 + (6 + 2 * 2 * 8 + 5) * 6 + 6
(5 + 8 + 2) + 3
3 + 3 * 5 * ((3 + 8 + 5 + 9) * 4 + 4 * 4 + 4) + 8 * 3
2 + (5 + 5 + (6 * 5 * 2 * 8) * 4 + 8)
8 + (5 * 7 * 2 * 2) * (7 + 9 * 5) * 2 + 9 + 4
((9 * 9) + 6 + 4 + 9) * 5
5 + 3 * ((4 + 8) + 9 * 2 * 6 + 7)
6 + 7 + 5 * (2 + 9 * 4 * 5 * 7 + 5) + 9 * 4
(7 * 2 + 4 + (8 * 8 + 2 * 5 * 3 * 6)) + (4 + 4 * 3 + 7) + 4 * 6
2 * (5 * 9 * (5 + 3 * 5) * 5 + 6) + 4 + 5
5 * (4 + 7 + 4)
9 * 7 + 8 + 4 + (6 * (6 * 2 * 4 + 9)) + 5
6 * 3
(5 * 6 + 2 * (2 + 5 * 6 * 4 + 9 + 2)) + (4 + 3 * (9 * 9 + 4 * 8 * 8 * 9) * 4) * (8 + 7 + (4 + 8 * 2 + 4) * 9)
8 * 5 + 9
7 + 4 * 9 * 6 + 6
9 + 6 * (8 * (7 * 6 + 2 + 4 + 6 + 9) * 2 + 2 + 2 + (7 + 7 + 9))
6 * (7 * 6 * 6) * 9 * 6 + 7
(5 * 7 + 9) * 7 + ((4 * 5 + 3) * 5 * (3 + 8 * 7) + 2 + 3 * (7 + 6 + 2)) + (3 * 5 * 5) + 2
4 * 2 * 2 * 2 * (6 + 4 + 9 + 4 * 5)
((9 * 7 + 7) + 8 * 7) * 4 + (7 + 9 * 9) * 6
8 * (6 * (8 + 4) + (5 + 6) * 6) * 7 + 4 * 7 * 2
(7 + 7 * (8 * 5 + 4)) * 5 * (3 * 6 * 2 * 3 * 9) * 3
4 + (7 * 5 * 3 * 5 + 3 * 5) * 7
(6 + 5 + 6 * 3 * (6 * 4 + 6)) + 2 * 5 * 9 + 3 * 5
3 * (6 + 3 + 5 * 3) + 6 * 3 + (7 + 8) * 9
(3 + 8 + (5 * 4 + 4 + 7) + 5 * 2) + 2 + 5 + 6 * 9 + (4 + 2 + 6)
9 * 8 + (3 + (4 + 2 * 8 + 7 * 5 + 3) + (3 * 3) * 3 + (2 * 8))
7 * 4 + (3 + 7 + 6 + 4 * (3 * 6) * 2) + ((5 + 5 * 5) + 6 + 2 * (2 * 3 * 3 + 3))
9 * 5 * (6 + (2 * 3)) + (3 * 4 + 3 + 9 + 6) + (9 + 5 + 2 + (3 * 4 * 9 * 9 * 5) + 2 * 7) * 5
(6 + 9 * 4 + 5 * 4 * (8 + 2 * 4 * 2 * 3)) + 4 * 9 + 6 * (4 * 5 * 9)
9 * 7 + (2 + (6 + 3) + (4 * 3 + 9) + 9) + 8 + 9 * 3
3 * (8 + 7 + 7 + 8) * (5 + 5 + 2 + 6 + 9 + 7)
7 + (7 * 5 + 3 * 4 * 9 + 2) * (8 * 6 + (5 + 2) + 6) * 4 + (6 * 3) + 2
(4 * 5 + 7 + 3 * (7 * 8) + 8) + 6 * 2 + 9 + 3
7 * 4 * 8 * (7 + 5 + 2) + (8 * 8 * 2) + 3
7 + 7 * (6 + (4 * 7 + 3 + 2 + 7) + 3)
2 + (8 + (5 + 9 + 2 * 6 * 6 + 8) * 8 + 2 * (5 * 2 + 8) * 4) + 2 * 6
(4 * 9 * (7 * 6 * 9 + 8 * 6) * 9) * 2 * 2
3 + (8 + 2 + (2 + 3 * 2) * 6 + (5 * 8 * 8 * 8 + 2 + 3)) * 4 * (9 + 3) * 6
8 + 3 * (3 + 5) + 3 + 5
4 + ((9 * 5 * 2 + 7 + 5) + 6 + 3 + 6 * (7 * 6) + 6) * 2 * 3 * (3 * 9 + 9)
((4 * 9) * 8 * 6) + 8 * 8 + 6 + ((6 + 4 + 7) * (2 + 2 * 4 * 9) + 3 + (5 * 9 + 9 * 9 + 5) + 2)
(8 * 4) + (8 + 8)
((4 + 5 + 2 * 4 * 7 + 3) * 6 * (4 * 6 + 8) * 9 * (9 + 7 + 5 + 3)) * 5
8 * 2 + 8 + (7 * (8 + 2 + 6 * 7 + 9) + (5 + 9 + 3) + 6 * 6) * (8 + (4 * 2 + 4 + 7 * 5) + 2 * 6) * 5
(2 * 5 + (8 * 7 + 9 + 2 + 2)) * 2 + (8 * (2 + 4) + 4 * 5 + 7) + 4
4 + (2 + (4 * 3 * 9) * 5 * 4)
((3 + 4) * 7 + 6 + (5 * 3 * 8 + 8 * 9) * 3 + 6) + 8 * 4 * ((7 + 4 * 3) * (6 + 9 + 9 * 4 * 7) + 9 + 5 + 2 + (5 + 8 * 4 * 6 + 4 * 8))
4 * (9 * 5 * (5 * 7 * 7 + 4)) * 5 * (5 * 7 + (4 * 5) * 4 + 9)
5 + (8 * 6 + 8) + 8
7 + (8 + 6) * 4 + 2
(3 * (9 + 6 * 8)) * 8
3 + 6 + 4 + ((5 + 4 * 2) + 7)
7 * 3 + 5 * (2 * 5 + 4) * 8
5 * 5 + (6 * (8 + 5) * 7) * 7 + 4
7 + 9 + (2 + (3 + 8 + 4) + 9 * 2 + 6) * (7 + (3 + 6 * 8 + 8 * 7) + 9 * 3 * 8 + (9 * 6 + 2 + 8 + 4 * 4))
6 * (2 * 8 + 3 + 5 + 5) + (3 + (8 * 2 * 3) * (2 + 9 * 8 * 5 + 3) + 4 + 7) * 7 + (5 * 5 + 7)
(2 * 2 * 6 * 4 * 9 + (9 * 5 + 7 * 4 + 6 * 2)) * 4 + (4 + (8 * 2 + 3 + 6))
2 + (8 + 4 * 8 + 3) * 6 + 7 + 4
(6 + 6 * (2 * 5 * 5 * 4 * 5 * 4) + 8 * 7 * 3) + 5 + (3 * 6 + 3 * 7) + 5 + 5 * 3
2 * (8 + 2 + 6 * (9 * 9 * 9 + 4 * 2 * 7) * 3 * (4 + 6 * 3 + 8 + 4)) + 8
(6 * 7 + 8 * 6 * 7 + (5 + 9 * 3 + 6 + 9 * 5)) + 2 * 6
(7 + 2 * 4 + 3) + 4 * 5 + 3
((7 * 7 + 2 + 7) + (3 + 3 + 5 + 9 * 3 + 2) * (2 * 4 * 7 + 6 * 3)) * (2 + (7 + 4 + 3 * 9 + 4 * 5) * 4 + 3 * (5 + 8 * 3)) + 5 + (2 + 8 * 2 * 8 * (6 * 7 + 4 + 5)) * (3 * (7 * 6 * 3 * 8)) + 7
3 * 4 * ((8 + 8 + 9) * 6 + 6 + 7 + 6) + 8 + 3
(6 + (7 * 4) + (9 + 6 + 3 * 9)) + 2 * (4 + 6 * 5 + (2 + 8) * 5 + 9) + 3 * (6 + 8 + 8 * (7 * 8 * 3 * 2 + 2 + 8))
(9 + 8 * 4 + (5 * 8 + 7 * 2 * 8 * 9) * 8 + 9) * 3
9 + ((5 * 3 + 6) + (8 + 6 * 6 + 7 + 2 + 8) * 8 + 5 + (9 + 8 + 2 * 9 + 2)) * 7
((8 + 2 + 6 + 3) * 8 + 5 + 8 + 2) * 9
(6 + (4 * 4 * 7 * 2 + 6) * 4 + 2 * 8 * (6 + 2 * 8)) * 2 * 8
3 * (4 + 3 + 3 + (3 * 7 * 7)) + 6 + 7 + 4 + 8
(6 * 8 + 7) * 8 * 9 + 8 + 4
(7 * 7) * 2 + (8 * 7) + 4 * (5 * 2 * (3 + 4 + 7 * 8 * 3) * 9) + 6
7 + (9 * (6 + 8 * 7 + 6 * 3) + 4) * 4 + 3
6 + 3 * ((2 + 2 + 3 + 9 + 9 + 8) * 6 + 2) + 5
3 * 6 * 6 + 2 + 2 + (2 * 2)
6 + (4 + 9 * (5 + 9 * 4 * 6 + 6) + 4 * 6 * (2 * 7 * 7 * 4 + 8)) + 5
((2 + 6) + 2 + 5) + 7 + 3 + 5 * 3 + 5
(6 * (2 + 8 + 7) + 4 * (2 + 8) * 9) + 9 * 6
(2 * (9 * 4 * 3 * 2) + (4 + 4 * 3 + 2)) + 4
(6 + 4 * (5 + 9)) + 7 * 7 * 8 * 5 * 3
(3 + (5 + 4 * 3 + 9)) * 2 * (9 + 6 * 6 * (7 + 8 + 2 * 5) * 8 * 6)
8 + 6 * 6
8 + (8 * 9) + 5
8 + (7 * (6 + 8) * 7 * (5 * 7 * 8 * 7) + (8 + 4 + 6 * 9 + 8) + 4) + (6 * 4) * 3 * 7
9 + 4 + 3 * 7 * 5
(8 + 9) + 6 + 4 * 7
5 * (4 * 6 + 4 + 2 * (5 * 2 * 2 * 8)) * 3
3 * 3 + 2 + ((8 + 5 + 4 + 8 + 8) * 7 * 6 + 9 * 8)
9 + (8 + (8 + 9) + 7 + 8)
(8 + 2) + (2 + 5 + 7) + 6 * 6 * 6 * 6
5 + 7 + (5 + 4 * (5 * 6 + 3 + 3) + (7 * 9 * 5 * 6 * 6 + 3) * 8) * 7
6 + ((7 * 3) * 6 * 5 + 5 + (3 + 3 + 9)) + (6 * 2 + 6 + 9 + (2 + 4 * 3 * 4) + 7)
8 * 5 + (9 * 2 * 7 * 2 * 6 + 8) * 2 + 2 + 6
6 * 8
(2 * 3 + 5 + (8 + 6 * 8 * 7 * 2)) * 3 + 2 + 6 + 2 * 5
(7 + 6 * (2 + 2 * 4 * 9 + 7 * 5) * 4 + 2) + 4 * (9 + 6) + (9 + 5) + 7
5 * (3 + 7 + 7 * 4)
2 * ((2 * 7 * 8 * 4 * 3 + 7) + 6 + 3) * 5 * 7
8 * 4 + 7 + (6 * 4 + 3 + 2) + 7 * 8
7 * 9 + (2 * 9 * 2) * 6
8 + (6 * (2 + 8) + 9) + (7 + 6 + 6 * (8 * 3 * 5 * 5 * 9) + 3 + 7) + 8
2 + 5 * 4 + (4 * (3 + 7 * 5 + 8) * 8 + 2) + 3 * 7
(8 * (9 * 7 + 9 + 9 + 4) * 3 + 2) * 8
4 + (6 + (2 + 4 * 6) + 4)
(8 * (4 + 6 + 2 * 6 + 7)) * 9 + 8 + 3 * 5
((2 * 7 + 3 * 5) * (5 + 7 + 7 + 3 * 7 * 3) * 8) * 2 * ((2 * 9 * 4 * 6 + 4) + 6 + (8 * 5 * 4 * 5 * 6 * 8) + 7 * (9 * 6 + 7 * 3 + 4 + 7)) + 9
6 + 8 + (3 * 3 + 2) + 5 + 4
5 * 6 + 6 * 5 * ((3 + 5 * 8 + 4 * 8) * 9 * 9 + 6 * 4 + 6) + (4 * 7 * 5 + 9 + 7)
2 * 7 * (4 * 7 + (4 + 7 + 4 + 3 * 2 + 7) + 7)
((8 + 3 * 6 * 6 + 4) + (9 + 5 + 3 * 3) + 7 * (3 * 4 + 4 + 9 * 4 + 6) + (8 + 5 + 2 * 2 * 5)) * 8 * 6 * 7 + ((5 + 6 + 2 * 4 + 2) * (9 + 8 + 9) + 6 + (6 * 5 * 9 + 7) * 4 * 6) * 7
4 * 5 * (9 * 3) + (9 + 6 + 5 * 8)
3 * 8
9 + 2 * (7 + (2 + 9) * 9) + 4 * 4 * 8
(8 + 4 + 7 * 2 + 8 * (8 + 7 * 4 + 4)) + 4
4 + 8 + ((7 * 9 + 9) + 3 + 2 + 3) * 8
(6 + (4 + 3 + 8 + 6 * 8)) * (5 + 9 * (5 + 2 * 7 + 8) + (6 * 7 * 4 + 2 * 5) + 4 * 9) * 8 * 5
8 + 3 + 4 * 9 * ((4 * 9 + 3 + 6) + 3 * 3 + 9) * 2
6 + ((3 * 2) * (4 + 9 + 9 * 5 * 2) * (2 * 8 + 4 * 7 + 4 + 8)) * 5 + (9 * 4 * 6 + 6 * 4 + 8)
2 + (5 + 4 * 8) + (9 * 9)
8 * 3 + 7 * 3 + ((2 * 2 + 6 * 3) * 3 * 7 * 8 + 5) + 9
4 * 7 + ((6 + 7 * 3 * 4 + 8) * 2 + 6 + (4 * 6 + 9 + 6 * 8 * 3) + 3 * 3) + 3
5 * (9 * 9 + (7 + 6 + 2 + 9 + 9 + 9)) * 8
5 + 4 * 2 + 7 * (5 * 5 + 2 + 3)
2 * 2 + 6 + ((2 + 2 + 5) * 6 * (2 + 7 + 3 * 9) * 5 + 9 * 8)
((2 * 4 + 7) + 9 * 8) + 5 * 6 * 2 + 9
6 + ((7 * 9 * 9 + 2) * 2)
6 * (7 + (4 + 7 * 2) * 5 + 2 + 7) + 6 * 7 + 5
8 * (6 * 8 + (7 + 2 + 7) + 3) + 7 + 6
(7 * 2 * 3 * 7) + 4 * 3 + 6 * 9 + 7
8 * 7 * (8 * 9 * 3)
9 + (9 * 4 * (9 + 3 * 5 + 9 + 9) * 8 + 5 + 9)
6 * (9 * 2 * 9 + 6 + 9 + 8) + (6 * 9 * 5) + 2 * 4
2 * 5 * (7 + 8 + 3 + 8 + 6 * 4) * 4 + 5
2 * 2 * (4 + 3) + 2 + 4 * 4
(6 * (9 * 6 + 2 * 2) * 4 * 3 * 4 * 7) + 2
(2 * 5) * 3 + 3 * 3 * 7 * 8
3 + 6 + ((6 * 6) * (9 + 8 * 2) * 7 + 5 + 9 * 2)
9 + 7 + (2 * 8)
(8 * 7) + (8 + 6 * 7 + (3 * 9 + 6) * 6 + 8) + (4 * 2 * 9)
2 + 2 + 2 + 9 * ((4 + 5 * 7 * 5 * 4 * 7) * (9 + 9) + 4 * 4 + 9) * 8
4 + 2 + ((6 + 8 * 4 + 7) * 7 + 3 * 9 + (9 + 5))
7 + 8 * (3 * (3 + 9 + 6 * 5) + 6 * 8) * 7 + 4
8 + 7 * (2 * (5 * 7)) + (4 * 3 + 7)
(2 + 8 * 7) + ((8 * 9 * 3 + 3 + 5 * 7) * 2 * (9 + 6 * 3 * 5) * 4 * (4 + 6 * 6 + 4 * 9) * 3) * 6 + 4 * 4 + 2
3 * (9 + 4 + (9 + 5 + 8 + 6 * 3 * 4) * 8 + (9 * 3 + 8 + 4 + 7)) * 8
(4 + 4 * (4 * 7)) * 2 + 7 * 3
((4 * 9) * (9 + 6 + 9 * 8 + 7)) + 6 + 7 + 7
6 + ((9 * 5 + 9 + 6 * 6 + 4) * 7 + (9 + 5 + 5) * 9 + 3) * (5 * 9) + 8 + 9
(3 + 8 * (7 * 3 * 4)) * (6 * (6 + 4) + (9 + 8) * (2 * 5 + 4) + (8 + 5 * 6 + 5 * 2 + 2)) * 6 + 9 + (7 + 6 * 5) + (5 + 4 + (6 + 8 * 2) * 2)
4 * ((6 * 8 + 7 * 6 + 4) + 4)
((5 * 6) + 4) + (9 + 4 + 9) + 2
5 * 9 * 7 * 6 + (9 * 7)
5 + (2 + 7) * 5 + 9 + 7
6 * 2 * 8 + 4
(3 + 2 * 4 + 8) + ((7 * 5 + 7 * 2 * 8) + 7 + 2) * 6 * 2 + 5
(2 * 5) * (3 * 9 * 4 * 8 + 5 * 3) * ((9 + 5 * 6 * 3) + 3 * 7 + 4) * 5
((3 + 6 * 3) * (4 + 9 * 5 * 6 + 4 * 7)) + ((8 * 7 * 2 + 7) + 5 * 6) * 6 + 7
(8 + 4 * 8 * 8) * 9 * 9 + 7 + 4
(7 * 9 + 5) * 5 + (9 + 4 + 4 + (7 * 9 * 2 * 8 * 2 + 9)) * ((7 * 5 * 7 * 3 * 7) * 5 * 2) + 8
5 + (6 * (8 + 9) * 7 + 9) + 3 + 3
8 + 8 * (6 * 5 * (3 + 5 + 9 * 2 * 9 * 7))
5 * (4 + 7) * 5 + 7 + 8 + 6
3 * ((5 + 6 + 2 + 7) * 4 * 6) * 5 * 5
(6 + 3 * (9 * 9 * 7 * 8 * 9 + 9) + 5) * 8 * 6 + 7 + 2
8 * (4 + 3 * 5 + (5 + 2 * 3 + 8) * 2 + (8 + 7 * 7 + 4 * 7 + 7)) + 8 * 6 + 4 * 5
4 + 7 * 8 * (2 + 6 + 5) * (4 + 8 + 4)
9 + 8 * ((2 * 3 * 6 + 4 * 2) + (6 * 5 * 9 + 7) * 5 * 2 * 9 * 7) + (9 + 4 * (2 * 8 * 7) * 3 + (9 + 8)) + 3 + 6
7 * 3 * 8 + ((6 + 7) * 9) * 2
5 + 3
4 + 9 * 7 * ((7 * 8 + 7 * 2 + 5 * 7) + 5 * 4) + (5 * 5 + (7 * 6) * 6)
((2 + 4) * 5) * 3 + 5
5 + (2 + 8 * 9 * 6 * 2 * (2 + 8 + 3 + 5)) * 9 * 8 + 3 * (9 + (4 + 2 + 4 + 7 * 4) * 9 * 9 + 7)
2 + 6 * 9 + 3 + (7 + 8 + 2) * 4
5 * 4 * (2 * 4 + 3 + 3 * (9 + 6 + 6) + (3 * 8 * 4)) * 4 * 3 + (9 * 7)
7 * (5 * 5 + 4 + 8 + (3 * 4 + 6 + 9)) * 2 * 9 * (6 + 7)
2 + (5 + 3 * 5 * 8) + 3 * 8 + (9 + 9 * 8 * 2 * 2)
((7 + 9 * 9) * 7 * 2) + 6 * 6 * 9
(6 * (9 + 9 + 4 + 5 + 6 + 2) + 6 + 8 + (7 * 3 * 8)) + 2 + 6 + 2
(3 + (6 * 2 + 2 + 6 * 7 + 8) * 9 * 2) * ((2 + 9) + 8 * 9 + 2) + 3 * (3 + 4 * 7 * (3 + 2 * 8 * 6 + 7) * (5 + 3)) * 5
(9 * (9 * 9 + 7 * 4) + (7 * 4 * 7 * 5) * (9 * 2 + 8 + 5 * 6)) * (6 * (7 + 9 + 6 * 7 + 9) + 4 * 4 * 2 + 6) * 9
4 + (3 + (4 + 5)) + 7 * (6 + 4 * (5 + 3 + 9 + 5 + 2) * 4 + 4) + 8 + 8
((5 + 8) + 5) * 9 + 6 + 8 * 7
8 * (5 + (3 * 3 + 6 * 3)) * 5 + 2 + 8 * 8
6 * 2 * 9 * (8 * 7 * (2 * 4 + 6 + 7 + 4 * 5)) + 9 + 7
(5 * 3 * (8 * 2 * 8 + 2 + 8) * (8 + 8 + 9 * 7 * 6 * 3) + (4 * 2 * 7) * 4) + (4 * 3 + 9 * 5) + 5 + (5 + 9)
(6 + 3) * 5 + (6 + 7 + 5 + 7)
(9 * (6 + 6 * 8 + 4) * (3 * 6 + 6 + 7 + 7 + 5) + (5 * 7 + 4) * 9) * (7 + 3 + 7 * 2 + (5 + 7 * 6 + 8) * 4) * 7
6 + 8 * (5 * 5 + (3 * 2 * 2 * 7 + 4 * 9) * 7 + 4) + 8 + 4
9 + (5 * 7) * (5 * 6 * 8 * (5 * 2) + 9) * (6 + 3 + 6 + 9 + 2) * 6
8 * (8 + 8 + 9 + 9 * 6 * 3) + 8 * (3 * 3) + 3 * 3
7 * 7 * (5 + 5 * 9) + (6 * 6 * 3 * 4 * 8 + 8) + 3
(3 * 2) + 5 * (6 * (9 + 2 + 3 + 2 * 9 + 5) + 6) + 2 + 7 * 9
9 * 2 + 3 + (3 * 7) + 4
7 * 5 * 7 * (4 + 3 * 7 + 3 + (4 * 5 + 5) + (5 * 8)) * (8 * 3 * (8 + 9))
((3 * 8 * 8 + 6 + 5 * 5) + 3 + (3 * 8 * 7)) * 2 * (9 + (9 * 8) * 5) * 5 * 4 + 7
4 * 9 * (4 + (3 * 7) + (6 * 4 * 9)) + 2 + 8
5 * ((7 + 2 + 6 + 6) * 2 + 4 * 8)
5 + 9 * ((7 + 2) * 5 * 4 * (5 + 7) + (8 + 4 * 8 * 7 * 9))
((4 + 3) + 6 * 3) * (4 * (4 * 6) * 3 * 2 + 8 * 4) + 8
5 + (6 + 3 + 6 * 8 * 7 * 2) + 3 * 9 + (8 + 2 + 6 * (4 + 6 * 6 * 8 * 3 * 3)) + 7
7 + (8 + 8 * (8 + 3 * 3 * 5 + 2)) + 4 + (2 + 3 * 7 * 7 + 6 + 2) * 9
7 * 3 * 2 + 6 + 7 * 4
(3 + 4 * 7 + (8 * 3 * 5 * 8 + 5 * 3) * (7 + 4 * 8 + 9)) + 8 + (4 * 3 * 4) * (6 + 4 + 8) + 5 + (9 + 6 + 2 + 4)
((3 + 9 + 5) * 7 * 2 * (3 + 7)) + 5 + 3
(4 * 9 + 3 + 9) * 8 * 8 + ((7 * 2 + 6 * 2 * 2) + 8 * 3 * 2 + 2 + 6) * 3 + 7
(5 * 6 * (8 + 8) + 2) + 6 + 2 * (5 + 4) + 2
(3 * 8 + 2 + 5 + 6 + 6) + (8 + 7 + 9 * 4 * 4 + (4 * 4 + 4 * 7 + 7)) * 4
(7 * 7 * 4) * 7 * 3 + 6
(9 * 3 + 7) * 7 + 4 + 2 * 7 * 3
6 * 9 + (6 * 6 + 6 * (3 * 9 + 7))
5 + 6 * 7 + 8 + (3 * 3 + 5 + 3 + 6) + 8
(6 + 4 + 6 * 9) + (3 * (6 * 3 * 2 + 2 + 9)) + (2 + 9 + 8 * 3 * 8 + 9) + 4 + (4 + 4 + 7)
4 + 3 * ((6 * 3 * 2) + 3 * 3 + (6 * 4 + 5 * 5 * 7) * 6 + 3)
2 + (7 * 5 * 6 + 8 + 4 * 8) * 3 * 6 * 3
9 * (8 * (6 * 7 + 7) * 3 + 9) + 7 * 5 + 6
((3 * 5) + 2 * 4 * 2) * 7 + (4 + (4 * 2 * 6) + 2) + (3 + 5 * 8 + 6) + (5 + 2 * 6) * 2
8 + 9 * (4 + 6 + 9 + 2 + 4 + 6) * (9 + 4 * 5) * 2
(6 + 9 + 4 + 7 * 7 + (6 + 5 + 4 * 6 + 4 * 5)) * 3 + 7 + (2 + 9 + 7 + 8 + 4 * 5)
(6 * 7 * (7 * 7 + 3 * 9 + 4 * 2) + 8 * 7) * 3 * 2
(7 * (5 * 2 + 2 + 8 * 4 + 6)) + 7 + 7 * 8 * 7 + 2
(8 * 6 * (4 + 6 * 8 * 8)) * 8 + 4
(4 + 7) * (7 * 4 + 4 + 5 + (9 * 9 * 4 * 5) + 8) + 4 + (8 * 9 + 2 + 4 * (2 * 2 + 8) * (5 * 7 * 4 * 6 + 2)) + 6
4 * (8 * (2 * 5) + 4 * (7 * 2 + 7 + 8) * 7) * 4 * 9 * 7 + ((5 * 4 * 5 + 7 + 9) + 7 * 7 + (6 * 3 + 8 + 7 * 4) + (6 + 4 * 3))
((3 + 4 + 7 * 8 * 5) * 9 * 6) + 6 + 3
((7 + 3 * 8) * (3 * 7 + 4 * 3) + 5 + 2 * 9) * 8 + 4 + 2
((3 + 8 * 8 + 9) * 5 * (5 * 6 + 5 + 7)) + 2 * (6 * 5 + 4 * 6 * 4 * 8) * 9 * 7
4 + 9 * 8 * ((8 * 6) + 7 * 2 + 2 * 6)
(2 * 3 * 3) + 4 * 8 * (3 * 5)
(8 * (5 + 9) + (5 * 6 * 7 * 2) + 4 + 4 + (6 * 9 + 8 + 7 + 2)) * 7 * 2 * 6 + 2 * 2
(8 * 9 * 7 + 3 * 6) + 5 + 4 * ((9 + 8) + (3 + 7 + 6 * 2) + (7 * 5 * 9 + 5) * 8 * 3) + (6 + 9 * (6 * 8) + 2 + 4 * 4)
6 + 8 * 9 + (4 * (9 + 2 + 3 + 5 + 3 + 8) + (3 + 7 * 4) + 4 * 7 * (6 + 2))
2 + 4 * 7 * 5 + (8 * 3) + 6
9 + 9 + 4 + (4 * 3 + 3 * 2 + (7 + 2 + 9 + 8) + 4)
3 * 7 * 7 * 9 + 7
(3 * 2 * 3 * 5 + 6) + 4 * 5 + 8 + 5
7 * 6 + 7 * 8 + 8 * 3
(6 + 2 + (6 * 8 * 5) * 6 + 3 * (8 * 5 * 9 * 2 * 7 + 4)) * 3
(8 + (4 + 2 * 3 + 7 * 5) * 9) * 3 + 9 + 4 + 6
(9 + 6 + (6 + 3 * 2 + 8 * 5 + 7) + (8 + 8 * 3 + 9 * 4 * 8) + 6 * 2) * (7 + 9 + 5 + 8) * 7 + 4 * ((6 * 5 * 7 + 7 * 9 * 3) + (2 * 4 + 4 * 2))
(5 * (3 + 5 + 5 * 6) * 7) + 8 + 3 * 4 + 7
3 * 7 * (9 * 5 + 9 + 7) + 9 * (3 * 4 * 4 * (8 * 4 + 2 + 5)) + (9 * (5 * 3 * 4 * 9) + 5 * 8 + 9 * 5)
6 + 7 + ((2 * 4 * 5 + 7) * 2 * (8 + 8 * 4 * 3) * 3) * 5 * 6 * 4
7 * (9 * 6 * 4) + 7 + (8 * 2 * 7 * 4 + 8)
4 + 7 * (8 * 4 * 2 * (2 + 5 + 9 + 5 * 2 + 5) * (5 * 6 + 2 * 5 + 9) + 3) * 9 * (3 * 6 + 3 * (4 * 4 * 6 + 6 * 2 * 9)) + 8
2 + 6 * (8 + 9 + 6 + 2 * (9 + 4 * 7 * 5 + 5)) * (7 * 7 * 2 * 9)
4 * 3 + (8 * (6 * 8 + 8 + 6) + 3) + 5
(5 + 6) + (2 + 6 + 4 + 8)
(9 * 5 * 3 + 6 * 6) + (5 * 4)
3 * 2 + (7 + 7 * 2 + (6 + 6 + 2 * 8 * 4) * 3) * 8
(4 * 6 + 6) + 4 * 9
6 + (9 * 3 * 3 * 3) + 8
(5 + (9 + 6 + 3 + 7 * 3 + 5)) + 5 + (4 * 3 + 4) * 9 * 3
(6 + 8 * (8 + 3 * 2 + 4 + 5 + 9)) * 7
6 + 3 * 3 * 5 + ((7 + 4 * 8) + 2 * 7 + 4 * (5 + 8) * 8) + ((5 * 4 * 2) * 4 * 5 + (3 + 4 + 4 * 7 + 7))
2 * 3 * 3 * 4 * 7 + 2
6 * (7 + 9 * 9 + (9 * 6) + 5) + 4
8 * (2 * 7 + 5 * 5 + 8) + 5
(4 * 5) + (3 + 3 * (5 * 9 + 8 * 2) + 6 * 4 + 4) * 5 + 6
4 * 9 + (3 + 3 * 2 + (2 + 4 * 4 * 7 * 7 + 5) * 9) * 5 * 3
(5 * 3 * 6 + 8 + 2 + 4) * 6 * 8 * ((6 * 2 + 2 * 4 + 6 * 2) * 6)
4 * (5 * 4 * 6 + (7 + 3 * 9 + 3)) + (3 * 4 + 4 + (5 + 7 * 6 * 2 + 7) + 3)
3 * (5 + 2 * 6 + 8 + 5) + ((8 + 3 * 6 + 8 * 3) * (7 * 7)) + 8 * 4 * 5
4 + (8 + 6 * (4 + 3)) * 4 + 4
4 * 3 * (3 + (8 * 9) * (9 * 7 * 4 * 9 * 4 * 8) * (5 + 2 + 2 + 2))
8 + (2 + 2 * 5 * 3 * (4 * 3 + 7 + 6 + 3)) + 7 * 2 * 5 * 5
4 * (7 * 9 * (2 * 2 * 5) + 2 + 8 * (6 + 2)) * 4 * 7 * 8
(2 * 3 * 3 * 2 + (9 * 8 + 5 + 4)) + 7 * 2 * 6
((6 * 7 + 3 + 3 * 4) * (5 + 9 + 5) + 7 * 6) + 9
6 * 9 + 8 + 3 + 6 * (6 * 9 + 9 + 3 * 2 * 2)
(3 * 5 + 2 + 9) * (6 + 9 + (6 * 8 + 2 + 8 * 3 + 8) + (2 + 6 + 6 + 6 * 3)) * ((7 * 5 * 9) * 3 + 9 + 3 + 8 * 2) * 8 * 6 + 8
3 * (4 + 4 + 6 * (5 + 7) * 8) * (3 * (6 * 7 + 3 + 7 + 7) + 7)
6 * 8 + 8 * (6 + 9 + 5) * 7 + 7
3 * (8 + 5 + 8 * 7 * 7 * 8) + 7 + 9 * 4 + 9
(4 + 5 + 7 + 6) * (9 * (6 * 3 + 9 + 3 + 3) + 6 * 8 + (2 * 8 * 4 + 7 + 5 * 4))
7 * 2 + 3 * (5 + 9) + 7 * 3
7 * 8 + 5 + 7 * 4 * ((7 * 4 + 8 * 8) * (6 + 5 * 8 + 7 + 5 * 3))
(7 * 4 + 3) + (7 + 9 * 7 * 9 * (3 + 2 * 2 * 8 * 2 * 6)) + 5 * 3 + 3 + 3
5 + 6 * (3 + 6) * (6 + (7 + 2) * 3 + (8 * 6 + 3 + 8 + 5 * 9)) * 7
(9 + 6 + 8) + 3 + 5 + 2 + (3 * 9 + (8 + 3) + 7 * 3)
6 + (9 + 7 * 2 * (8 * 9 * 2 + 7 + 6 * 7) * 6)
2 + 4 * ((7 * 2 + 4) * 8) + 9 * 3 * 3
3 + ((5 + 4) * 4 * 7 * (3 + 5 * 4 + 3) + 3)
(7 + 4 * 3 * 6 * 7 * 5) * 2 * 7 + 4
(7 * (7 * 9) + 8 + 2 * (6 + 9 + 9 * 2 * 5) + 7) * 7 * 7 + 9
(2 * 5 + 9 * 5) * 3
3 * 9 + 5 + 7 * 9 + 6
9 * 3 * ((3 * 6 + 4 + 8) + 9 + 2) * 3
8 * 3 + 6 * 8 * 2 + 4".to_string()
}
